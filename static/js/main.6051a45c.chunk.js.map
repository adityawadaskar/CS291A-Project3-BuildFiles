{"version":3,"sources":["LoginForm.js","UserList.js","MessageList.js","Compose.js","ConnectedIndicator.js","App.js","serviceWorker.js","index.js"],"names":["LoginForm","props","onChange","event","setState","target","name","value","onSubmit","preventDefault","request","XMLHttpRequest","form","FormData","append","state","password","username","sessionStorage","url","open","self","onreadystatechange","this","readyState","status","accessToken","JSON","parse","responseText","token","onLogin","alert","send","className","Modal","Dialog","Header","closeButton","Title","Body","Form","Group","controlId","Label","Control","type","placeholder","Button","variant","React","Component","UserList","users","ListGroup","Item","Array","from","map","item","index","color","MessageList","scrollToBottom","messagesEnd","scrollIntoView","behavior","history","style","float","clear","ref","el","Compose","undefined","message","setRequestHeader","autoComplete","ConnectedIndicator","connected","nextProps","badge","Badge","App","date_format","timestamp","date","Date","toLocaleDateString","toLocaleTimeString","startStream","stream","EventSource","addEventListener","close","loggedIn","Set","data","add","user","console","log","msg","push","delete","forEach","renderLogin","renderComponents","rel","href","integrity","crossOrigin","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6051a45c.chunk.js","sourcesContent":["import React from 'react';\nimport './LoginForm.css';\nimport Modal from 'react-bootstrap/Modal';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\n\nclass LoginForm extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            url: 'http://localhost:3000',\n            username: '',\n            password: ''\n        };\n    }\n\n    onChange = event => {\n        this.setState({ [event.target.name]: event.target.value });\n    };\n\n    onSubmit = event => {\n        event.preventDefault();\n\n        let request = new XMLHttpRequest();\n        let form = new FormData();\n        form.append(\"password\", this.state.password);\n        form.append(\"username\", this.state.username);\n        sessionStorage.url = this.state.url;\n        request.open(\"POST\", this.state.url + \"/login\");\n        let self = this;\n        request.onreadystatechange = function() {\n            if (this.readyState !== 4) return;\n            if (this.status === 201) {\n                sessionStorage.accessToken = JSON.parse(this.responseText).token;\n                self.props.onLogin();\n            } else if (this.status === 403) {\n                alert(\"Invalid username or password\");\n            } else {\n                alert(\"Failure to login.\");\n            }\n        };\n        request.send(form);\n    };\n\n    render() {\n        return  (\n            <div className=\"LoginForm\">\n                <Modal.Dialog>\n                    <Modal.Header closeButton>\n                        <Modal.Title>Login</Modal.Title>\n                    </Modal.Header>\n\n                    <Modal.Body>\n                    <Form onSubmit={this.onSubmit}>\n                        <Form.Group controlId=\"formBasicUrl\">\n                            <Form.Label>URL</Form.Label>\n                            <Form.Control type=\"text\" name=\"url\" value={this.state.url} onChange={this.onChange}/>\n                        </Form.Group>\n                        <Form.Group controlId=\"formBasicUser\">\n                            <Form.Label>Username</Form.Label>\n                            <Form.Control type=\"text\" name=\"username\" placeholder=\"Username\" onChange={this.onChange}/>\n                        </Form.Group>\n\n                        <Form.Group controlId=\"formBasicPassword\">\n                            <Form.Label>Password</Form.Label>\n                            <Form.Control type=\"password\" name=\"password\" placeholder=\"Password\" onChange={this.onChange}/>\n                        </Form.Group>\n                        <Button variant=\"primary\" type=\"submit\">\n                            Submit\n                        </Button>\n                    </Form>\n                    </Modal.Body>\n                </Modal.Dialog>\n            </div>\n        );\n    }\n}\n\nexport default LoginForm;\n","import React from 'react';\nimport './UserList.css';\nimport ListGroup from 'react-bootstrap/ListGroup'\n\nclass UserList extends React.Component {\n\n    constructor(props) {\n      super(props);\n      this.state = {\n        users: this.props.users\n      };\n    }\n\n    render() {\n        return  (\n            <div className=\"UserList\">\n                <ListGroup>\n                    <ListGroup.Item variant=\"success\">Online Users</ListGroup.Item>\n                    {Array.from(this.state.users).map((item, index) => {\n                        const color = index%2 === 0 ? 'light' : 'dark';\n                        return (<ListGroup.Item variant={color}> {item} </ListGroup.Item>);\n                    })}\n                </ListGroup>\n            </div>\n        );\n    }\n}\n\n\nexport default UserList;\n","import React from 'react';\nimport './MessageList.css';\nimport ListGroup from 'react-bootstrap/ListGroup'\n\nclass MessageList extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n          history: this.props.history\n        };\n    }\n\n    scrollToBottom = () => {\n      this.messagesEnd.scrollIntoView({ behavior: \"smooth\" });\n    }\n\n    componentDidMount() {\n      this.scrollToBottom();\n    }\n\n    componentDidUpdate() {\n      this.scrollToBottom();\n    }\n\n    render() {\n        return  (\n            <div className=\"MessageList\">\n                <ListGroup>\n                    <ListGroup.Item variant=\"primary\">Chat History</ListGroup.Item>\n                    {Array.from(this.state.history).map((item, index) => {\n                        const color = index%2 === 0 ? 'light' : 'dark';\n                        return (<ListGroup.Item variant={color}> {item} </ListGroup.Item>);\n                    })}\n                </ListGroup>\n                <div style={{ float:\"left\", clear: \"both\" }}\n                     ref={(el) => { this.messagesEnd = el; }}>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default MessageList;\n","import React from 'react';\nimport './Compose.css';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\n\nclass Compose extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            message: ''\n        };\n    }\n\n    onChange = event => {\n        this.setState({ [event.target.name]: event.target.value });\n    };\n\n    onSubmit = event => {\n        if (sessionStorage.accessToken === undefined)\n          return;\n        event.preventDefault();\n\n        if (this.state.message.value === \"\") return;\n\n        let form = new FormData();\n        form.append(\"message\", this.state.message);\n\n        let request = new XMLHttpRequest();\n        request.open(\"POST\", sessionStorage.url + \"/message\");\n        request.setRequestHeader(\n            \"Authorization\",\n            \"Bearer \" + sessionStorage.accessToken\n        );\n        request.send(form);\n        this.setState({message: ''})\n    };\n\n    render() {\n        return  (\n            <div className=\"Compose\">\n                <Form onSubmit={this.onSubmit}>\n                    <Form.Group controlId=\"formBasicUser\">\n                        <Form.Control type=\"text\" autoComplete=\"off\" name=\"message\" value={this.state.message} placeholder=\"Type your message and press ENTER\" onChange={this.onChange}/>\n                    </Form.Group>\n                    <Button variant=\"primary\" type=\"submit\">\n                        Submit\n                    </Button>\n                </Form>\n            </div>\n        );\n    }\n}\n\nexport default Compose;\n","import React from 'react';\nimport Badge from 'react-bootstrap/Badge';\n\nclass ConnectedIndicator extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n          connected: this.props.connected\n        };\n    }\n\n    componentWillReceiveProps(nextProps) {\n      this.setState({ connected: nextProps.connected });\n    }\n\n    render() {\n        const badge = this.state.connected ? {\n            status: 'Connected',\n            color: 'success'\n        } : {\n            status: 'Disconnected',\n            color: 'danger'\n        };\n        return  (\n            <div className=\"ConnectedIndicator\">\n                <h1>CS291A Chat <Badge variant={badge.color}>{badge.status}</Badge></h1>\n            </div>\n        );\n    }\n}\n\nexport default ConnectedIndicator;\n","import React from 'react';\nimport './App.css';\nimport LoginForm from './LoginForm';\nimport UserList from './UserList';\nimport MessageList from './MessageList';\nimport Compose from './Compose';\nimport ConnectedIndicator from './ConnectedIndicator'\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nclass App extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            loggedIn: false,\n            connected: false,\n            users: new Set(),\n            history: []\n        };\n    }\n\n    date_format = (timestamp) => {\n        var date = new Date(timestamp * 1000);\n        return (\n            date.toLocaleDateString(\"en-US\") +\n            \" \" +\n            date.toLocaleTimeString(\"en-US\")\n        );\n    }\n\n    startStream = () => {\n        let stream = new EventSource(\n            sessionStorage.url + \"/stream/\" + sessionStorage.accessToken\n        );\n        let self = this;\n\n        stream.addEventListener(\n            \"Disconnect\",\n            function(event) {\n                stream.close();\n                self.setState({ loggedIn: false, connected: false, users: new Set(), history: [] });\n                delete sessionStorage.accessToken;\n            },\n            false\n        );\n\n        stream.addEventListener(\n            \"Join\",\n            function(event) {\n                var data = JSON.parse(event.data);\n                let { users, history } = self.state;\n                users.add(data.user);\n                self.setState({ users })\n                console.log(data);\n                let msg = self.date_format(data[\"created\"]) + \" JOIN: \" + data.user\n                history.push(msg);\n                self.setState({ history })\n            },\n            false\n        );\n\n        stream.addEventListener(\n            \"Part\",\n            function(event) {\n                var data = JSON.parse(event.data);\n                let { users, history} = self.state;\n                users.delete(data.user);\n                self.setState({users})\n                console.log(data);\n                let msg = self.date_format(data[\"created\"]) + \" PART: \" + data.user\n                history.push(msg);\n                self.setState({ history })\n            },\n            false\n        );\n\n        stream.addEventListener(\n            \"Message\",\n            function(event) {\n                var data = JSON.parse(event.data);\n                console.log(data);\n                let msg = self.date_format(data[\"created\"]) +\n                        \" (\" +\n                        data.user +\n                        \") \" +\n                        data.message\n                let {history} = self.state\n                history.push(msg)\n                self.setState({history})\n            },\n            false\n        );\n\n        stream.addEventListener(\n            \"ServerStatus\",\n            function(event) {\n                var data = JSON.parse(event.data);\n                console.log(data);\n                let msg = self.date_format(data[\"created\"]) + \" STATUS: \" + data.status\n                let {history} = self.state\n                history.push(msg)\n                self.setState({history})\n            },\n            false\n        );\n\n        stream.addEventListener(\n            \"Users\",\n            function(event) {\n                // handle_connect();\n                let {users} = self.state\n                users.clear()\n                let users_sse = new Set(JSON.parse(event.data).users)\n                users_sse.forEach(function (user, index) {\n                  users.add(user)\n                });\n                self.setState({users, connected: true})\n            },\n            false\n        );\n\n        stream.addEventListener(\n            \"error\",\n            function(event) {\n                if (event.target.readyState === 2) {\n                    delete sessionStorage.accessToken;\n                    self.setState({ loggedIn: false});\n                } else {\n                    console.log(\"Disconnected, retrying\");\n                }\n                self.setState({connected: false})\n            },\n            false\n          );\n    };\n\n    onLogin = () => {\n        this.setState({ loggedIn: true});\n        this.startStream();\n    };\n\n    renderLogin = () => {\n        return (\n          <LoginForm onLogin={this.onLogin} />\n        );\n    }\n\n    renderComponents = () => {\n        return (\n          <div className=\"components\">\n            <div className=\"user-list\">\n                <UserList users={this.state.users} />\n            </div>\n            <div className=\"message-list\">\n                <MessageList history={this.state.history} />\n            </div>\n            <div className=\"compose\">\n                <Compose/>\n            </div>\n          </div>\n        );\n    };\n\n    render() {\n        return  (\n            <div className=\"App\">\n                <link\n                  rel=\"stylesheet\"\n                  href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\"\n                  integrity=\"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\"\n                  crossOrigin=\"anonymous\"\n                />\n                <ConnectedIndicator connected={this.state.connected} />\n                {!this.state.loggedIn ? this.renderLogin() : this.renderComponents()}\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}